@using NDiscoKit.Components.Branding
@using NDiscoKit.Models

<MudAppBar Dense Elevation="0">
    <MudStack Style="flex:1" Row AlignItems="AlignItems.Center">
        <MudIconButton Icon="@(Icons.Material.Rounded.Menu)" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer" />
        <NDiscoKitWordmark />
    </MudStack>

    <MudStack Row AlignItems="AlignItems.Center">
        <MudMenu OpenChanged="AudioSourceMenuOpened">
            <ActivatorContent>
                @{
                    AudioSource? source = AudioService.Source;
                    <MudChip T="object" Icon="@(GetAudioSourceIcon(source, inheritColor: true))" Color="@(GetAudioSourceColor(source))">
                        @(GetAudioSourceLabel(source))
                    </MudChip>
                }
            </ActivatorContent>
            <ChildContent>
                @{
                    ReadOnlySpan<AudioSource?> tmp = [null, .. Enum.GetValues<AudioSource>()];
                    foreach (AudioSource? source in tmp)
                    {
                        bool sourceNotFound = source.HasValue && !SourceFound(source.Value, cached: true);

                        <MudMenuItem Disabled="@sourceNotFound" Icon="@(GetAudioSourceIcon(source))" IconColor="@(GetAudioSourceColor(source))" OnClick="@(async () => await SetAudioSource(source, updateSettings: true))">
                            <MudStack Spacing="0">
                                @(GetAudioSourceLabel(source))

                                @if (sourceNotFound)
                                {
                                    <MudText Class="mt-n1" Typo="Typo.caption">Not Found</MudText>
                                }
                            </MudStack>
                        </MudMenuItem>
                    }
                }
            </ChildContent>
        </MudMenu>
        
        <MudSwitch T="bool" Label="Disco" Value="@(DiscoService.IsRunning)" ValueChanged="@SetDiscoRunning" />
    </MudStack>
</MudAppBar>